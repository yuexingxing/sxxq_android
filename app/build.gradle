apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "cn.sancell.ssbm"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        multiDexEnabled true

        ndk {
            abiFilters "armeabi-v7a"
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        sourceSets {
            main {
                jniLibs.srcDirs = ['libs']
            }
        }
    }
    lintOptions {
        ignoreWarnings true
        checkReleaseBuilds false
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/androidx.vectordrawable_vectordrawable.version'
    }
    //签名
    signingConfigs {
        release {
            storeFile file("sanshao.jks")
            keyAlias "sanshao"
            storePassword "sanshao_2020"
            keyPassword "sanshao_2020"
        }
    }
    buildTypes {
        //配置apk名称
        android.applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = getApkName()
            }
        }
        release {
            debuggable false         //!!! remmeber to false
            minifyEnabled false    //混淆
            zipAlignEnabled true  //Zipalign优化
            shrinkResources false  // 移除无用的resource文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    allprojects {
        repositories {
            jcenter()
            maven {
                url 'https://maven.aliyun.com/repository/releases'
            }
            maven { url 'https://dl.bintray.com/umsdk/release' }
            flatDir {
                dirs 'libs'
            }
        }
        flavorDimensions "default"
        productFlavors {
            kuan {
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "kuan"]
            }
            xiaomi {
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
            }
            qh360 {
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "qh360"]
            }
            baidu {
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "baidu"]
            }
            wandoujia {
                manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    testImplementation 'junit:junit:4.12'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.0.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.tencent.bugly:crashreport:3.2.3'
    api('com.alibaba:arouter-api:1.4.1') {
        exclude group: 'com.android.support'
    }
    implementation 'com.android.support:multidex:1.0.3'
    annotationProcessor 'com.alibaba:arouter-compiler:1.2.2'

    debugImplementation 'com.didichuxing.doraemonkit:doraemonkit:1.2.1'
    releaseImplementation 'com.didichuxing.doraemonkit:doraemonkit-no-op:1.2.0'

    implementation 'com.aliyun.sdk.android:AliyunPlayer:4.5.0-full'
    implementation 'com.alivc.conan:AlivcConan:0.9.5'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.6.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'

    //友盟统计
    implementation 'com.umeng.sdk:common:1.5.1'
    implementation 'com.umeng.sdk:analytics:7.5.0'
    //友盟分享
    implementation 'com.umeng.sdk:share-core:6.9.1'
    implementation 'com.umeng.sdk:share-wechat:6.9.1'

    implementation project(':commonbiz')
    implementation project(':livemodule')
    implementation project(':videoplaymodule')
    implementation project(':UdeskSDKUI')
}

//------------以下代码用于配置一键上传蒲公英----------------
//获取apk路径
def getApkFullPath() {
    return rootDir.getAbsolutePath() + "/app/build/outputs/apk/release/" + getApkName()
}

//此处可修改所打包的apk文件名
def getApkName() {
    return "sanshao-${android.defaultConfig.versionName}-${releaseTime()}.apk"
}

//设定添加打包时间
static def releaseTime() {
    return new Date().format("MMdd-HHmm", TimeZone.getTimeZone("Asia/Shanghai"))
}

//将密钥存在本地 防止泄露 local.properties 在Git的时候不会被上传
def readProperties(key) {
    File file = rootProject.file('local.properties')
    if (file.exists()) {
        InputStream inputStream = rootProject.file('local.properties').newDataInputStream()
        Properties properties = new Properties()
        properties.load(inputStream)

        if (properties.containsKey(key)) {
            return properties.getProperty(key)
        }
    }
}

//描述log
static def getUpdateDescription() {
    return '1.修复一些bug；\n2.提升用户体验！'
}

//执行打包上传任务
task("uploadApk") {
    doLast {
        def command = "curl -F \"file=@${getApkFullPath()}\" -F \"uKey=${readProperties('pgyer.userKey')}\" -F \"_api_key=${readProperties('pgyer.apiKey')}\" -F \"buildUpdateDescription=${getUpdateDescription()}\" https://www.pgyer.com/apiv2/app/upload"
        try {
            exec {
                ExecSpec execSpec ->
                    executable 'curl'
                    args = ['-F', "file=@${getApkFullPath()}", '-F', "uKey=${readProperties('pgyer.userKey')}", '-F', "_api_key=${readProperties('pgyer.apiKey')}", '-F', "buildUpdateDescription=${getUpdateDescription()}", "${readProperties('pgyer.uploadurl')}"]
            }
            println "uploadApk success~"
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
}

uploadApk.dependsOn("assembleDebug")